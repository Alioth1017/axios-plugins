/** 
 * axios-plugins@0.0.1.dev
 * 
 * Copyright (c) 2023 halo951 <https://github.com/halo951>
 * Released under MIT License
 * 
 * @author halo951(https://github.com/halo951)
 * @license MIT
 */
function n(n,t,r,u){return new(r||(r=Promise))((function(i,o){function e(n){try{f(u.next(n))}catch(n){o(n)}}function c(n){try{f(u.throw(n))}catch(n){o(n)}}function f(n){var t;n.done?i(n.value):(t=n.value,t instanceof r?t:new r((function(n){n(t)}))).then(e,c)}f((u=u.apply(n,t||[])).next())}))}function t(n,t){var r,u,i,o,e={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(f){return function(c){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,c[0]&&(e=0)),e;)try{if(r=1,u&&(i=2&c[0]?u.return:c[0]?u.throw||((i=u.return)&&i.call(u),0):u.next)&&!(i=i.call(u,c[1])).done)return i;switch(u=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return e.label++,{value:c[1],done:!1};case 5:e.label++,u=c[1],c=[0];continue;case 7:c=e.ops.pop(),e.trys.pop();continue;default:if(!(i=e.trys,(i=i.length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){e=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){e.label=c[1];break}if(6===c[0]&&e.label<i[1]){e.label=i[1],i=c;break}if(i&&e.label<i[2]){e.label=i[2],e.ops.push(c);break}i[2]&&e.ops.pop(),e.trys.pop();continue}c=t.call(n,e)}catch(n){c=[6,n],u=0}finally{r=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,f])}}}var r=function(r){return r.interceptors.request.use((function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2,r]}))}))}),(function(n){return n}),{runWhen:function(n){return!0}}),r.interceptors.response.use((function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2,r]}))}))})),{plugin:function(n){return this}}},u=function(n){return t=n,Array.isArray(t)?n:null==n?[]:[n];var t},i=function(n){return u(n).map((function(n){return n instanceof RegExp?n:{test:function(t){return n.includes(t)}}}))},o=function(n){var t,r;return void 0===n&&(n={}),t=n.includes,r=n.excludes,i(null!=t?t:[]),i(null!=r?r:[]),{name:"debounce",factory:function(n,t){}}},e=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},c=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},f=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},a=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},d=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},v=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},l=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},s=function(n){return{name:"mock",factory:function(n,t){}}},h=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},p=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},y=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}};export{o as debounce,a as interrupt,h as loading,l as logger,c as merge,s as mock,d as offline,y as onlySend,v as queue,f as retry,p as sign,e as throttle,r as useAxiosPlugin};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZXMuanMiLCJzb3VyY2VzIjpbIi4uL3NyYy91c2UtcGx1Z2luLnRzIiwiLi4vc3JjL3V0aWxzL2NyZWF0ZS1maWx0ZXIudHMiLCIuLi9zcmMvcGx1Z2lucy9kZWJvdW5jZS9pbmRleC50cyIsIi4uL3NyYy9wbHVnaW5zL3Rocm90dGxlL2luZGV4LnRzIiwiLi4vc3JjL3BsdWdpbnMvbWVyZ2UvaW5kZXgudHMiLCIuLi9zcmMvcGx1Z2lucy9yZXRyeS9pbmRleC50cyIsIi4uL3NyYy9wbHVnaW5zL2ludGVycnVwdC9pbmRleC50cyIsIi4uL3NyYy9wbHVnaW5zL29mZmxpbmUvaW5kZXgudHMiLCIuLi9zcmMvcGx1Z2lucy9xdWV1ZS9pbmRleC50cyIsIi4uL3NyYy9wbHVnaW5zL2xvZ2dlci9pbmRleC50cyIsIi4uL3NyYy9wbHVnaW5zL21vY2svaW5kZXgudHMiLCIuLi9zcmMvcGx1Z2lucy9sb2FkaW5nL2luZGV4LnRzIiwiLi4vc3JjL3BsdWdpbnMvc2lnbi9pbmRleC50cyIsIi4uL3NyYy9wbHVnaW5zL29ubHktc2VuZC9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEF4aW9zSW5zdGFuY2UgfSBmcm9tICdheGlvcydcclxuXHJcbi8qKiDms6jlhaXliLAgYXhpb3Mg5a6e5L6L5Lit55qE5YaF5a2Y5a+56LGha2V5ICovXHJcbmNvbnN0IFNIQVJFRF9DQUNIRV9LRVk6IHN0cmluZyA9ICdfX3NoYXJlZF9fJ1xyXG4vKiog5rOo5YWl5YiwIGF4aW9zIOWunuS+i+S4reeahCDmj5Lku7bpm4blkIjliJfooaggKi9cclxuY29uc3QgUExVR0lOU19LRVk6IHN0cmluZyA9ICdfX3BsdWdpbnNfXydcclxuXHJcbi8qKiDmj5Lku7bmjqXlj6MgKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUGx1Z2luIHtcclxuICAgIC8qKiDmj5Lku7blkI0gKi9cclxuICAgIG5hbWU6IHN0cmluZ1xyXG5cclxuICAgIC8qKiDmiafooYzpobrluo8gKi9cclxuICAgIGVuZm9yY2U/OiAncHJlJyB8ICdwb3N0J1xyXG5cclxuICAgIC8qKiDmj5Lku7blrp7njrAgKi9cclxuICAgIGZhY3Rvcnk6IGFueVxyXG59XHJcblxyXG4vKipcclxuICog5L2/55SoIGF4aW9zIOaJqeWxleaPkuS7tlxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb24g6YCa6L+H6ZO+5byP6LCD55So5pa55byPLCDkuLogYGF4aW9zYCDmianlsZXmj5Lku7bmlK/mjIEuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdXNlQXhpb3NQbHVnaW4gPSAoYXhpb3M6IEF4aW9zSW5zdGFuY2UpID0+IHtcclxuICAgIC8qKiDlt7Lms6jlhoznmoTmj5Lku7YgKi9cclxuICAgIGNvbnN0IHBsdWdpbnM6IEFycmF5PElQbHVnaW4+ID0gW11cclxuXHJcbiAgICBheGlvcy5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoXHJcbiAgICAgICAgYXN5bmMgKGNvbmZpZykgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gY29uZmlnXHJcbiAgICAgICAgfSxcclxuICAgICAgICAoZXJyb3I6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3JcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcnVuV2hlbjogKGNvbmZpZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIClcclxuXHJcbiAgICBheGlvcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKGFzeW5jIChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZVxyXG4gICAgfSlcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC8qKiDmt7vliqDmlrDmj5Lku7YgKi9cclxuICAgICAgICBwbHVnaW4ocGx1ZzogSVBsdWdpbik6IHR5cGVvZiB0aGlzIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwidHlwZSBGaWx0ZXIgPSAodXJsOiBzdHJpbmcpID0+IGJvb2xlYW5cclxudHlwZSBNYXRjaGVyID0geyB0ZXN0OiAodXJsOiBzdHJpbmcpID0+IGJvb2xlYW4gfVxyXG5cclxuY29uc3QgaXNBcnJheSA9IChhcmc6IHVua25vd24pOiBhcmcgaXMgYW55W10gfCByZWFkb25seSBhbnlbXSA9PiB7XHJcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpXHJcbn1cclxuXHJcbmNvbnN0IGVuc3VyZUFycmF5ID0gPFQ+KHRoaW5nOiByZWFkb25seSBUW10gfCBUIHwgdW5kZWZpbmVkIHwgbnVsbCk6IHJlYWRvbmx5IFRbXSA9PiB7XHJcbiAgICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZ1xyXG4gICAgaWYgKHRoaW5nID09IG51bGwpIHJldHVybiBbXVxyXG4gICAgcmV0dXJuIFt0aGluZ11cclxufVxyXG5cclxuY29uc3QgZ2V0TWF0Y2hlcnMgPSAoZnA6IEZpbHRlclBhdHRlcm4pOiBBcnJheTxNYXRjaGVyPiA9PiB7XHJcbiAgICBjb25zdCB0b01hdGNoZXIgPSAoaWQ6IHN0cmluZyB8IFJlZ0V4cCk6IE1hdGNoZXIgPT4ge1xyXG4gICAgICAgIGlmIChpZCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaWRcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdGVzdCh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpZC5pbmNsdWRlcyh1cmwpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW5zdXJlQXJyYXkoZnApLm1hcCh0b01hdGNoZXIpXHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEZpbHRlclBhdHRlcm4gPSBSZWFkb25seUFycmF5PHN0cmluZyB8IFJlZ0V4cD4gfCBzdHJpbmcgfCBSZWdFeHAgfCBudWxsXHJcblxyXG4vKiog5Yib5bu6566A5piT55qEdXJs6L+H5ruk5ZmoICovXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVVcmxGaWx0ZXIgPSAoaW5jbHVkZT86IEZpbHRlclBhdHRlcm4sIGV4Y2x1ZGU/OiBGaWx0ZXJQYXR0ZXJuKTogRmlsdGVyID0+IHtcclxuICAgIGNvbnN0IGluY2x1ZGVNYXRjaGVycyA9IGdldE1hdGNoZXJzKGluY2x1ZGUgPz8gW10pXHJcbiAgICBjb25zdCBleGNsdWRlTWF0Y2hlcnMgPSBnZXRNYXRjaGVycyhleGNsdWRlID8/IFtdKVxyXG5cclxuICAgIHJldHVybiAodXJsOiBzdHJpbmcpOiBib29sZWFuID0+IHtcclxuICAgICAgICAvLyA/IOWIpOaWreaYr+WQpuWMheWQq1xyXG4gICAgICAgIGZvciAoY29uc3QgbWF0Y2hlciBvZiBpbmNsdWRlTWF0Y2hlcnMpIHtcclxuICAgICAgICAgICAgaWYgKCFtYXRjaGVyLnRlc3QodXJsKSkgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vID8g5Yik5pat5piv5ZCm5o6S6ZmkXHJcbiAgICAgICAgZm9yIChjb25zdCBtYXRjaGVyIG9mIGV4Y2x1ZGVNYXRjaGVycykge1xyXG4gICAgICAgICAgICBpZiAobWF0Y2hlci50ZXN0KHVybCkpIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEF4aW9zSW5zdGFuY2UgfSBmcm9tICdheGlvcydcclxuaW1wb3J0IHsgSVBsdWdpbiB9IGZyb20gJ0AvdXNlLXBsdWdpbidcclxuaW1wb3J0IHsgRmlsdGVyUGF0dGVybiwgY3JlYXRlVXJsRmlsdGVyIH0gZnJvbSAnQC91dGlscy9jcmVhdGUtZmlsdGVyJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJRGVib3VuY2VPcHRpb25zIHtcclxuICAgIC8qKlxyXG4gICAgICog5oyH5a6a5ZOq5Lqb5o6l5Y+j5YyF5ZCrXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIOacquaMh+WumuaDheWGteS4iywg5omA5pyJ5o6l5Y+j5Z2H5YyF5ZCr6Ziy5oqW6YC76L6RXHJcbiAgICAgKi9cclxuICAgIGluY2x1ZGVzPzogRmlsdGVyUGF0dGVyblxyXG4gICAgLyoqXHJcbiAgICAgKiDmjIflrprlk6rkupvmjqXlj6PlupTlv73nlaVcclxuICAgICAqL1xyXG4gICAgZXhjbHVkZXM/OiBGaWx0ZXJQYXR0ZXJuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDmj5Lku7Y6IOmYsuaKllxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb24g5Zyo5LiA5q615pe26Ze05YaF5Y+R6LW355qE6YeN5aSN6K+35rGCLCDlkI7miafooYznmoTor7fmsYLlsIbnrYnlvoXkuIrmrKHor7fmsYLlrozmiJDlkI7lho3miafooYxcclxuICovXHJcbmV4cG9ydCBjb25zdCBkZWJvdW5jZSA9IChvcHRpb25zOiBJRGVib3VuY2VPcHRpb25zID0ge30pOiBJUGx1Z2luID0+IHtcclxuICAgIGNvbnN0IGZpbHRlciA9IGNyZWF0ZVVybEZpbHRlcihvcHRpb25zLmluY2x1ZGVzLCBvcHRpb25zLmV4Y2x1ZGVzKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuYW1lOiAnZGVib3VuY2UnLFxyXG4gICAgICAgIGZhY3Rvcnk6IChheGlvczogQXhpb3NJbnN0YW5jZSwgc2hhcmVkU3RhdGU6IHt9KSA9PiB7fVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEF4aW9zQWRhcHRlciwgSW50ZXJuYWxBeGlvc1JlcXVlc3RDb25maWcgfSBmcm9tICdheGlvcydcclxuXHJcbi8qKlxyXG4gKiDpgILphY3lmag6IOiKgua1gVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHRocm90dGxlID0gKCk6IEF4aW9zQWRhcHRlciA9PiB7XHJcbiAgICByZXR1cm4gYXN5bmMgKF9jb25maWc6IEludGVybmFsQXhpb3NSZXF1ZXN0Q29uZmlnKTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBBeGlvc0FkYXB0ZXIsIEludGVybmFsQXhpb3NSZXF1ZXN0Q29uZmlnIH0gZnJvbSAnYXhpb3MnXHJcblxyXG4vKipcclxuICog6YCC6YWN5ZmoOiDlkIjlubZcclxuICovXHJcbmV4cG9ydCBjb25zdCBtZXJnZSA9ICgpOiBBeGlvc0FkYXB0ZXIgPT4ge1xyXG4gICAgcmV0dXJuIGFzeW5jIChfY29uZmlnOiBJbnRlcm5hbEF4aW9zUmVxdWVzdENvbmZpZyk6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQXhpb3NBZGFwdGVyLCBJbnRlcm5hbEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gJ2F4aW9zJ1xyXG5cclxuLyoqXHJcbiAqIOmAgumFjeWZqDog5aSx6LSl6YeN6K+VXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcmV0cnkgPSAoKTogQXhpb3NBZGFwdGVyID0+IHtcclxuICAgIHJldHVybiBhc3luYyAoX2NvbmZpZzogSW50ZXJuYWxBeGlvc1JlcXVlc3RDb25maWcpOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEF4aW9zQWRhcHRlciwgSW50ZXJuYWxBeGlvc1JlcXVlc3RDb25maWcgfSBmcm9tICdheGlvcydcclxuXHJcbi8qKlxyXG4gKiDpgILphY3lmag6IOS4reaWrVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGludGVycnVwdCA9ICgpOiBBeGlvc0FkYXB0ZXIgPT4ge1xyXG4gICAgcmV0dXJuIGFzeW5jIChfY29uZmlnOiBJbnRlcm5hbEF4aW9zUmVxdWVzdENvbmZpZyk6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQXhpb3NBZGFwdGVyLCBJbnRlcm5hbEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gJ2F4aW9zJ1xyXG5cclxuLyoqXHJcbiAqIOmAgumFjeWZqDog5byx572R5pqC5a2YICjnprvnur/or7fmsYIpXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgb2ZmbGluZSA9ICgpOiBBeGlvc0FkYXB0ZXIgPT4ge1xyXG4gICAgcmV0dXJuIGFzeW5jIChfY29uZmlnOiBJbnRlcm5hbEF4aW9zUmVxdWVzdENvbmZpZyk6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQXhpb3NBZGFwdGVyLCBJbnRlcm5hbEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gJ2F4aW9zJ1xyXG5cclxuLyoqXHJcbiAqIOmAgumFjeWZqDog6K+35rGC6Zif5YiXXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgcXVldWUgPSAoKTogQXhpb3NBZGFwdGVyID0+IHtcclxuICAgIHJldHVybiBhc3luYyAoX2NvbmZpZzogSW50ZXJuYWxBeGlvc1JlcXVlc3RDb25maWcpOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEF4aW9zQWRhcHRlciwgSW50ZXJuYWxBeGlvc1JlcXVlc3RDb25maWcgfSBmcm9tICdheGlvcydcclxuXHJcbi8qKlxyXG4gKiDpgILphY3lmag6IOaXpeW/l1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGxvZ2dlciA9ICgpOiBBeGlvc0FkYXB0ZXIgPT4ge1xyXG4gICAgcmV0dXJuIGFzeW5jIChfY29uZmlnOiBJbnRlcm5hbEF4aW9zUmVxdWVzdENvbmZpZyk6IFByb21pc2U8YW55PiA9PiB7XHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHR5cGUgeyBJUGx1Z2luIH0gZnJvbSAnQC91c2UtcGx1Z2luJ1xyXG5pbXBvcnQgdHlwZSB7IEF4aW9zSW5zdGFuY2UgfSBmcm9tICdheGlvcydcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU1vY2tPcHRpb25zIHtcclxuICAgIC8qKlxyXG4gICAgICog5ZCv55So5p2h5Lu2XHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIG1vY2vmj5Lku7blkK/nlKjmnaHku7Y6IOacquaYvuW8j+WjsOaYjuaXtiwg5qC55o2u6L+Q6KGM546v5aKD6Ieq5Yqo5Yik5pat44CCIOWQpuWImeWwhuagueaNruW9k+WJjeaYr+WQpuWkhOS6juW8gOWPkeeOr+Wig+WIpOaWreaPkuS7tuaYr+WQpueUn+aViOOAglxyXG4gICAgICogQGRlZmF1bHQgfCDpu5jorqTmg4XlhrXkuIssIOS7heW9k+WkhOS6juiwg+ivleaooeW8jyBgISFpbXBvcnQubWV0YS5lbnYuREVWYCDmiJYgYHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnYCDml7bnlJ/mlYhcclxuICAgICAqL1xyXG4gICAgZW5hYmxlPzogYm9vbGVhblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogIG1vY2sg5bel5YW35Zyw5Z2AIHwgbW9jaydzIGJhc2VVcmxcclxuICAgICAqL1xyXG4gICAgbW9ja1VybDogc3RyaW5nXHJcbn1cclxuXHJcbmRlY2xhcmUgbW9kdWxlICdheGlvcycge1xyXG4gICAgaW50ZXJmYWNlIEF4aW9zUmVxdWVzdENvbmZpZyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5oyH5a6a5b2T5YmN5o6l5Y+j5piv5ZCm5Li6bW9ja1xyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIOW9k+atpOmhuemFjee9ruWcqGF4aW9z5a6e5L6L5pe2LCDlkK/nlKjlhajlsYBtb2Nr6K+35rGCXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbW9jaz86IGJvb2xlYW5cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIOaPkuS7tjogbW9jayDor7fmsYJcclxuICovXHJcbmV4cG9ydCBjb25zdCBtb2NrID0gKG9wdGlvbnM6IElNb2NrT3B0aW9ucyk6IElQbHVnaW4gPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuYW1lOiAnbW9jaycsXHJcbiAgICAgICAgZmFjdG9yeTogKGF4aW9zOiBBeGlvc0luc3RhbmNlLCBzaGFyZWRTdGF0ZToge30pID0+IHt9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQXhpb3NBZGFwdGVyLCBJbnRlcm5hbEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gJ2F4aW9zJ1xyXG5cclxuLyoqXHJcbiAqIOmAgumFjeWZqDogbG9hZGluZ1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGxvYWRpbmcgPSAoKTogQXhpb3NBZGFwdGVyID0+IHtcclxuICAgIHJldHVybiBhc3luYyAoX2NvbmZpZzogSW50ZXJuYWxBeGlvc1JlcXVlc3RDb25maWcpOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEF4aW9zQWRhcHRlciwgSW50ZXJuYWxBeGlvc1JlcXVlc3RDb25maWcgfSBmcm9tICdheGlvcydcclxuXHJcbi8qKlxyXG4gKiDpgILphY3lmag6IOWPguaVsOetvuWQjVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHNpZ24gPSAoKTogQXhpb3NBZGFwdGVyID0+IHtcclxuICAgIHJldHVybiBhc3luYyAoX2NvbmZpZzogSW50ZXJuYWxBeGlvc1JlcXVlc3RDb25maWcpOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEF4aW9zQWRhcHRlciwgSW50ZXJuYWxBeGlvc1JlcXVlc3RDb25maWcgfSBmcm9tICdheGlvcydcclxuXHJcbi8qKlxyXG4gKiDpgILphY3lmag6IOS7heWPkemAgVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IG9ubHlTZW5kID0gKCk6IEF4aW9zQWRhcHRlciA9PiB7XHJcbiAgICByZXR1cm4gYXN5bmMgKF9jb25maWc6IEludGVybmFsQXhpb3NSZXF1ZXN0Q29uZmlnKTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxufVxyXG4iXSwibmFtZXMiOlsidXNlQXhpb3NQbHVnaW4iLCJheGlvcyIsImludGVyY2VwdG9ycyIsInJlcXVlc3QiLCJ1c2UiLCJjb25maWciLCJfX2F3YWl0ZXIiLCJlcnJvciIsInJ1bldoZW4iLCJyZXNwb25zZSIsInBsdWdpbiIsInBsdWciLCJ0aGlzIiwiZW5zdXJlQXJyYXkiLCJ0aGluZyIsImFyZyIsIkFycmF5IiwiaXNBcnJheSIsImdldE1hdGNoZXJzIiwiZnAiLCJtYXAiLCJpZCIsIlJlZ0V4cCIsInRlc3QiLCJ1cmwiLCJpbmNsdWRlcyIsImRlYm91bmNlIiwib3B0aW9ucyIsImluY2x1ZGUiLCJleGNsdWRlIiwiZXhjbHVkZXMiLCJuYW1lIiwiZmFjdG9yeSIsInNoYXJlZFN0YXRlIiwidGhyb3R0bGUiLCJfY29uZmlnIiwibWVyZ2UiLCJyZXRyeSIsImludGVycnVwdCIsIm9mZmxpbmUiLCJxdWV1ZSIsImxvZ2dlciIsIm1vY2siLCJsb2FkaW5nIiwic2lnbiIsIm9ubHlTZW5kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7ZzJDQXdCTyxJQUFNQSxFQUFpQixTQUFDQyxHQXNCM0IsT0FsQkFBLEVBQU1DLGFBQWFDLFFBQVFDLEtBQ3ZCLFNBQU9DLEdBQU0sT0FBQUMsT0FBQSxPQUFBLE9BQUEsR0FBQSxzQ0FDVCxNQUFBLENBQUEsRUFBT0QsS0FDVixHQUFBLElBQ0QsU0FBQ0UsR0FDRyxPQUFPQSxDQUNYLEdBQ0EsQ0FDSUMsUUFBUyxTQUFDSCxHQUNOLE9BQU8sQ0FDVixJQUlUSixFQUFNQyxhQUFhTyxTQUFTTCxLQUFJLFNBQU9LLEdBQVEsT0FBQUgsT0FBQSxPQUFBLE9BQUEsR0FBQSxzQ0FDM0MsTUFBQSxDQUFBLEVBQU9HLEtBQ1YsR0FBQSxJQUVNLENBRUhDLGdCQUFPQyxHQUNILE9BQU9DLElBQ1YsRUFFVCxFQzdDTUMsRUFBYyxTQUFJQyxHQUNwQixPQUxhQyxFQUtERCxFQUpMRSxNQUFNQyxRQUFRRixHQUlNRCxFQUNkLE1BQVRBLEVBQXNCLEdBQ25CLENBQUNBLEdBUEksSUFBQ0MsQ0FRakIsRUFFTUcsRUFBYyxTQUFDQyxHQVlqQixPQUFPTixFQUFZTSxHQUFJQyxLQVhMLFNBQUNDLEdBQ2YsT0FBSUEsYUFBY0MsT0FDUEQsRUFFQSxDQUNIRSxjQUFLQyxHQUNELE9BQU9ILEVBQUdJLFNBQVNELEVBQ3RCLEVBR2IsR0FFSixFQ0phRSxFQUFXLFNBQUNDLEdEU00sSUFBQ0MsRUFBeUJDLEVDUHJELFlBRnFCLElBQUFGLElBQUFBLEVBQThCLENBQUEsR0RTdkJDLEVDUkdELEVBQVFGLFNEUWNJLEVDUkpGLEVBQVFHLFNEU2pDWixFQUFZVSxRQUFBQSxFQUFXLElBQ3ZCVixFQUFZVyxRQUFBQSxFQUFXLElDVHhDLENBQ0hFLEtBQU0sV0FDTkMsUUFBUyxTQUFDL0IsRUFBc0JnQyxHQUFzQixFQUU5RCxFQ3ZCYUMsRUFBVyxXQUNwQixPQUFPLFNBQU9DLEdBQW1DLE9BQUE3QixPQUFBLE9BQUEsT0FBQSxHQUFBLHNDQUM3QyxNQUFNLENBQUEsU0FFZCxFQ0phOEIsRUFBUSxXQUNqQixPQUFPLFNBQU9ELEdBQW1DLE9BQUE3QixPQUFBLE9BQUEsT0FBQSxHQUFBLHNDQUM3QyxNQUFNLENBQUEsU0FFZCxFQ0phK0IsRUFBUSxXQUNqQixPQUFPLFNBQU9GLEdBQW1DLE9BQUE3QixPQUFBLE9BQUEsT0FBQSxHQUFBLHNDQUM3QyxNQUFNLENBQUEsU0FFZCxFQ0phZ0MsRUFBWSxXQUNyQixPQUFPLFNBQU9ILEdBQW1DLE9BQUE3QixPQUFBLE9BQUEsT0FBQSxHQUFBLHNDQUM3QyxNQUFNLENBQUEsU0FFZCxFQ0phaUMsRUFBVSxXQUNuQixPQUFPLFNBQU9KLEdBQW1DLE9BQUE3QixPQUFBLE9BQUEsT0FBQSxHQUFBLHNDQUM3QyxNQUFNLENBQUEsU0FFZCxFQ0pha0MsRUFBUSxXQUNqQixPQUFPLFNBQU9MLEdBQW1DLE9BQUE3QixPQUFBLE9BQUEsT0FBQSxHQUFBLHNDQUM3QyxNQUFNLENBQUEsU0FFZCxFQ0phbUMsRUFBUyxXQUNsQixPQUFPLFNBQU9OLEdBQW1DLE9BQUE3QixPQUFBLE9BQUEsT0FBQSxHQUFBLHNDQUM3QyxNQUFNLENBQUEsU0FFZCxFQ3VCYW9DLEVBQU8sU0FBQ2YsR0FDakIsTUFBTyxDQUNISSxLQUFNLE9BQ05DLFFBQVMsU0FBQy9CLEVBQXNCZ0MsR0FBc0IsRUFFOUQsRUNoQ2FVLEVBQVUsV0FDbkIsT0FBTyxTQUFPUixHQUFtQyxPQUFBN0IsT0FBQSxPQUFBLE9BQUEsR0FBQSxzQ0FDN0MsTUFBTSxDQUFBLFNBRWQsRUNKYXNDLEVBQU8sV0FDaEIsT0FBTyxTQUFPVCxHQUFtQyxPQUFBN0IsT0FBQSxPQUFBLE9BQUEsR0FBQSxzQ0FDN0MsTUFBTSxDQUFBLFNBRWQsRUNKYXVDLEVBQVcsV0FDcEIsT0FBTyxTQUFPVixHQUFtQyxPQUFBN0IsT0FBQSxPQUFBLE9BQUEsR0FBQSxzQ0FDN0MsTUFBTSxDQUFBLFNBRWQifQ==
