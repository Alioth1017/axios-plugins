/** 
 * axios-plugins@0.0.1.dev
 * 
 * Copyright (c) 2023 halo951 <https://github.com/halo951>
 * Released under MIT License
 * 
 * @author halo951(https://github.com/halo951)
 * @license MIT
 */
"use strict";function n(n,t,r,u){return new(r||(r=Promise))((function(e,o){function i(n){try{f(u.next(n))}catch(n){o(n)}}function c(n){try{f(u.throw(n))}catch(n){o(n)}}function f(n){var t;n.done?e(n.value):(t=n.value,t instanceof r?t:new r((function(n){n(t)}))).then(i,c)}f((u=u.apply(n,t||[])).next())}))}function t(n,t){var r,u,e,o,i={label:0,sent:function(){if(1&e[0])throw e[1];return e[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(f){return function(c){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(r=1,u&&(e=2&c[0]?u.return:c[0]?u.throw||((e=u.return)&&e.call(u),0):u.next)&&!(e=e.call(u,c[1])).done)return e;switch(u=0,e&&(c=[2&c[0],e.value]),c[0]){case 0:case 1:e=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,u=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!(e=i.trys,(e=e.length>0&&e[e.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!e||c[1]>e[0]&&c[1]<e[3])){i.label=c[1];break}if(6===c[0]&&i.label<e[1]){i.label=e[1],e=c;break}if(e&&i.label<e[2]){i.label=e[2],i.ops.push(c);break}e[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(n,i)}catch(n){c=[6,n],u=0}finally{r=e=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,f])}}}var r=function(n){return t=n,Array.isArray(t)?n:null==n?[]:[n];var t},u=function(n){return r(n).map((function(n){return n instanceof RegExp?n:{test:function(t){return n.includes(t)}}}))};exports.debounce=function(n){var t,r;return void 0===n&&(n={}),t=n.includes,r=n.excludes,u(null!=t?t:[]),u(null!=r?r:[]),{name:"debounce",factory:function(n,t){}}},exports.interrupt=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},exports.loading=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},exports.logger=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},exports.merge=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},exports.mock=function(n){return{name:"mock",factory:function(n,t){}}},exports.offline=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},exports.onlySend=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},exports.queue=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},exports.retry=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},exports.sign=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},exports.throttle=function(){return function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2]}))}))}},exports.useAxiosPlugin=function(r){return r.interceptors.request.use((function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2,r]}))}))}),(function(n){return n}),{runWhen:function(n){return!0}}),r.interceptors.response.use((function(r){return n(void 0,void 0,void 0,(function(){return t(this,(function(n){return[2,r]}))}))})),{plugin:function(n){return this}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
